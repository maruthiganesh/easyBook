// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webAPI.Data;

#nullable disable

namespace webAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231118121456_Fare_Booked_Tables")]
    partial class Fare_Booked_Tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("webAPI.Models.Booked_seats", b =>
                {
                    b.Property<int>("Seat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Seat_id"));

                    b.Property<DateTime>("Date_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fares")
                        .HasColumnType("int");

                    b.Property<int>("Screen_id")
                        .HasColumnType("int");

                    b.Property<int>("Screen_id1")
                        .HasColumnType("int");

                    b.Property<string>("Seat_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Seat_id");

                    b.HasIndex("Fares");

                    b.HasIndex("Screen_id1");

                    b.ToTable("Booked_Seats");
                });

            modelBuilder.Entity("webAPI.Models.Fares", b =>
                {
                    b.Property<int>("Fare_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Fare_id"));

                    b.Property<string>("Class_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Shows")
                        .HasColumnType("int");

                    b.HasKey("Fare_id");

                    b.HasIndex("Shows");

                    b.ToTable("Fares");
                });

            modelBuilder.Entity("webAPI.Models.Movies", b =>
                {
                    b.Property<int>("Movie_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Movie_id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movie_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Release_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Run_time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Movie_id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("webAPI.Models.Reservation_Bookedseats_mapper", b =>
                {
                    b.Property<int>("RB_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RB_id"));

                    b.Property<int>("Reservation_id")
                        .HasColumnType("int");

                    b.Property<int>("Seat_id")
                        .HasColumnType("int");

                    b.HasKey("RB_id");

                    b.HasIndex("Reservation_id")
                        .IsUnique();

                    b.HasIndex("Seat_id")
                        .IsUnique();

                    b.ToTable("Reservation_Bookedseats_Mappers");
                });

            modelBuilder.Entity("webAPI.Models.Reservations", b =>
                {
                    b.Property<int>("Reservation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Reservation_id"));

                    b.Property<int>("SS_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Reservation_id");

                    b.HasIndex("User_id")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("webAPI.Models.Screen_Show_mapper", b =>
                {
                    b.Property<int>("SS_id")
                        .HasColumnType("int");

                    b.Property<int>("Screen_id")
                        .HasColumnType("int");

                    b.Property<int>("Show_id")
                        .HasColumnType("int");

                    b.HasKey("SS_id");

                    b.HasIndex("Screen_id");

                    b.HasIndex("Show_id");

                    b.ToTable("Screen_Show_Mappers");
                });

            modelBuilder.Entity("webAPI.Models.Screens", b =>
                {
                    b.Property<int>("Screen_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Screen_id"));

                    b.Property<string>("Screen_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Theater_id")
                        .HasColumnType("int");

                    b.HasKey("Screen_id");

                    b.HasIndex("Theater_id");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("webAPI.Models.Shows", b =>
                {
                    b.Property<int>("Show_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Show_id"));

                    b.Property<int>("Movie_id")
                        .HasColumnType("int");

                    b.Property<string>("Show_time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_id");

                    b.HasIndex("Movie_id")
                        .IsUnique();

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("webAPI.Models.Theater", b =>
                {
                    b.Property<int>("Theater_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Theater_id"));

                    b.Property<string>("Theater_location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theater_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Theater_id");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("webAPI.Models.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_id"));

                    b.Property<string>("User_language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_mailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("webAPI.Models.Booked_seats", b =>
                {
                    b.HasOne("webAPI.Models.Fares", "Fare")
                        .WithMany("Booked_Seats")
                        .HasForeignKey("Fares")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webAPI.Models.Screens", "Screen")
                        .WithMany("Booked_Seats")
                        .HasForeignKey("Screen_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fare");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("webAPI.Models.Fares", b =>
                {
                    b.HasOne("webAPI.Models.Shows", "Show")
                        .WithMany()
                        .HasForeignKey("Shows")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("webAPI.Models.Reservation_Bookedseats_mapper", b =>
                {
                    b.HasOne("webAPI.Models.Reservations", "Reservation")
                        .WithOne("Reservation_Bookedseats_Mapper")
                        .HasForeignKey("webAPI.Models.Reservation_Bookedseats_mapper", "Reservation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webAPI.Models.Booked_seats", "Book_seat")
                        .WithOne("Reservation_Bookedseats_Mapper")
                        .HasForeignKey("webAPI.Models.Reservation_Bookedseats_mapper", "Seat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book_seat");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("webAPI.Models.Reservations", b =>
                {
                    b.HasOne("webAPI.Models.User", "User")
                        .WithOne("Reservation")
                        .HasForeignKey("webAPI.Models.Reservations", "User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("webAPI.Models.Screen_Show_mapper", b =>
                {
                    b.HasOne("webAPI.Models.Reservations", "Reservation")
                        .WithOne("Screen_Show_Mapper")
                        .HasForeignKey("webAPI.Models.Screen_Show_mapper", "SS_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webAPI.Models.Screens", "Screens")
                        .WithMany("Screen_Show_Mapper")
                        .HasForeignKey("Screen_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webAPI.Models.Shows", "Shows")
                        .WithMany("Screen_Show_Mapper")
                        .HasForeignKey("Show_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Screens");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("webAPI.Models.Screens", b =>
                {
                    b.HasOne("webAPI.Models.Theater", "Theater")
                        .WithMany("Screens")
                        .HasForeignKey("Theater_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("webAPI.Models.Shows", b =>
                {
                    b.HasOne("webAPI.Models.Movies", "Movie")
                        .WithOne("Shows")
                        .HasForeignKey("webAPI.Models.Shows", "Movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("webAPI.Models.Booked_seats", b =>
                {
                    b.Navigation("Reservation_Bookedseats_Mapper")
                        .IsRequired();
                });

            modelBuilder.Entity("webAPI.Models.Fares", b =>
                {
                    b.Navigation("Booked_Seats");
                });

            modelBuilder.Entity("webAPI.Models.Movies", b =>
                {
                    b.Navigation("Shows")
                        .IsRequired();
                });

            modelBuilder.Entity("webAPI.Models.Reservations", b =>
                {
                    b.Navigation("Reservation_Bookedseats_Mapper")
                        .IsRequired();

                    b.Navigation("Screen_Show_Mapper")
                        .IsRequired();
                });

            modelBuilder.Entity("webAPI.Models.Screens", b =>
                {
                    b.Navigation("Booked_Seats");

                    b.Navigation("Screen_Show_Mapper");
                });

            modelBuilder.Entity("webAPI.Models.Shows", b =>
                {
                    b.Navigation("Screen_Show_Mapper");
                });

            modelBuilder.Entity("webAPI.Models.Theater", b =>
                {
                    b.Navigation("Screens");
                });

            modelBuilder.Entity("webAPI.Models.User", b =>
                {
                    b.Navigation("Reservation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
