{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.checkedArray$ = new BehaviorSubject([]); // Initialize with an empty array\n  }\n\n  getAllDetails() {\n    return this.http.get('data/movie_details.json').pipe(map(data => {\n      const movieArray = Object.values(data);\n      return movieArray;\n    }));\n  }\n  updateCheckedArray(checkedArray) {\n    this.checkedArray$.next(checkedArray); // Update the BehaviorSubject directly\n  }\n  static #_ = this.ɵfac = function MovieService_Factory(t) {\n    return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MovieService,\n    factory: MovieService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","BehaviorSubject","MovieService","constructor","http","checkedArray$","getAllDetails","get","pipe","data","movieArray","Object","values","updateCheckedArray","checkedArray","next","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Projects\\easyBook\\easyBook-app\\src\\app\\services\\movie.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { map } from 'rxjs/operators';\n// import { Observable, BehaviorSubject } from 'rxjs';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n\n// export class MovieService {\n\n//   constructor(private http:HttpClient) { }\n\n//   getAllDetails(): Observable<MovieDetails[]> {\n//     return this.http.get<MovieDetails>('data/movie_details.json').pipe(\n//       map((data: MovieDetails) => {\n//         const movieArray: MovieDetails[] = Object.values(data);\n//         return movieArray;\n//       })\n//     );\n//   }\n\n//   private checkedArraySource = new BehaviorSubject<Array<any>>([]);\n//   checkedArray$ = this.checkedArraySource.asObservable();\n\n//   updateCheckedArray(checkedArray: Array<any>) {\n//     this.checkedArraySource.next(checkedArray);\n// }\n// }\n// interface MovieDetails {\n  \n//   ID: string;\n//   Name: string;\n//   Genre:string;\n//   Type:string;\n//   Price:string;\n//   City:string;\n\n// }\n\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class MovieService {\n  checkedArray$: BehaviorSubject<Array<any>> = new BehaviorSubject<Array<any>>([]); // Initialize with an empty array\n\n  constructor(private http: HttpClient) { }\n\n  getAllDetails(): Observable<MovieDetails[]> {\n    return this.http.get<MovieDetails>('data/movie_details.json').pipe(\n      map((data: MovieDetails) => {\n        const movieArray: MovieDetails[] = Object.values(data);\n        return movieArray;\n      })\n    );\n  }\n\n  updateCheckedArray(checkedArray: Array<any>) {\n    this.checkedArray$.next(checkedArray); // Update the BehaviorSubject directly\n  }\n}\n\ninterface MovieDetails {\n  ID: string;\n  Name: string;\n  Genre: string;\n  Type: string;\n  Price: string;\n  City: string;\n}\n"],"mappings":"AA2CA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAAqBC,eAAe,QAAQ,MAAM;;;AAMlD,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,aAAa,GAAgC,IAAIJ,eAAe,CAAa,EAAE,CAAC,CAAC,CAAC;EAE1C;;EAExCK,aAAaA,CAAA;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,yBAAyB,CAAC,CAACC,IAAI,CAChER,GAAG,CAAES,IAAkB,IAAI;MACzB,MAAMC,UAAU,GAAmBC,MAAM,CAACC,MAAM,CAACH,IAAI,CAAC;MACtD,OAAOC,UAAU;IACnB,CAAC,CAAC,CACH;EACH;EAEAG,kBAAkBA,CAACC,YAAwB;IACzC,IAAI,CAACT,aAAa,CAACU,IAAI,CAACD,YAAY,CAAC,CAAC,CAAC;EACzC;EAAC,QAAAE,CAAA,G;qBAhBUd,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZnB,YAAY;IAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;IAAAC,UAAA,EAHX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}